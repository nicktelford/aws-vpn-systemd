#!/usr/bin/env bash
NETCAT_CMD=$(which ncat 2>/dev/null || which nc 2>/dev/null)
BROWSER_CMD=$(which xdg-open 2>/dev/null || echo $BROWSER)
VPN_CMD="/opt/awsvpnclient/Service/Resources/openvpn/acvc-openvpn" # patched OpenVPN client

SAML_RESPONSE_TIMEOUT=30

VPN_INSTANCE="$1"
VPN_CONF="/etc/openvpn/client/$VPN_INSTANCE.conf"
VPN_HOSTNAME=$(sed -rn 's/remote ([^[:space:]]+) [[:digit:]]+$/\1/p' "$VPN_CONF")
VPN_PORT=$(sed -rn 's/remote [^[:space:]]+ ([[:digit:]]+)$/\1/p' "$VPN_CONF")
VPN_MGMT_SOCKET="/run/openvpn-client/$VPN_INSTANCE/mgmt.sock"

read -r -d '' SAML_RESPONSE <<'HTTP'
HTTP/1.1 200 OK

<script>window.close('','_parent','');</script>
Got SAMLResponse field, it is now safe to close this window
HTTP

resolve_host() {
  host="$1"

  if cmd=$(which dig); then
    $cmd a +short $host | sed -r '/[^[:digit:].]+/d' | head -n 1 
    return $?
  elif cmd=$(which host); then
    $cmd $host | sed -rn '{0,/has address/ s/.*has address ([[:digit:].]+)/\1/p;}'
    return $?
  elif cmd=$(which nslookup); then
    $cmd $host | sed -rn '{0,/Address: / s/Address: //p}'
    return $?
  elif cmd=$(which getent); then
    $cmd hosts $host | awk '{print $1; exit}'
    return $?
  else
    return 1
  fi
}

auth() {
  local addr="$1"
  local port="$2"
  local conf="$3"
  local timeout="${4:-30}"

  local local_port=35001

  local out=$($VPN_CMD --remote "$addr" "$port" --config "$conf" \
    --auth-retry none \
    --auth-user-pass <( printf "%s\n%s\n" "N/A" "ACS::$local_port" ) \
    | grep "AUTH_FAILED,CRV1"
  )

  # get SID from the reply
  local sid=$(echo "$out" | sed -rn 's/.*AUTH_FAILED,CRV1:R:([^:]+):.*/\1/p')

  # start a "web server" that will receive the saml response from the idp
  exec 3< <(echo -e "$SAML_RESPONSE" | timeout $timeout ${NETCAT_CMD} -l $local_port)
  local pid=$!

  # create a trap that will close the "web server" process as well if this script is aborted by CTRL+C
  trap "kill $pid 2> /dev/null" EXIT

  $BROWSER_CMD $(echo "$out" | grep -Eo 'https://[^[:space:]]+')

  local response=$(cat <&3)

  wait $pid

  # cleanup the trap
  trap - EXIT

  # if no response was received within the timeout window - exit
  if [[ $(echo "$response" | awk '/SAMLResponse.*$/' | wc -l) -lt 1 ]]; then
    echo "ERROR: No SAML response was received from the IDP." >&2
    exit 1
  fi

  printf "CRV1::%s::%s\n" "$sid" "$(echo -n "$(echo "$response" \
    | awk '/^SAMLResponse=/ { gsub(/SAMLResponse=/,""); gsub(/GET.*$/,""); printf "%s",$0; }')")"

  return 0
}

if [ ! -S "$VPN_MGMT_SOCKET" ]; then
  echo -e "ERROR: No OpenVPN client service is running for $VPN_INSTANCE. Start one with:\n  $ systemctl start aws-vpn@$VPN_INSTANCE.service" >&2
  exit 1
fi

VPN_GROUP=$(stat -c '%G' "$VPN_MGMT_SOCKET")

if ! groups | grep -P "\\b$VPN_GROUP\\b" >/dev/null; then
  echo "ERROR: User $USER is not in the '$VPN_GROUP' group." >&2
  exit 1
fi

if [ -z "$VPN_PORT" ]; then
  echo "ERROR: No 'remote' parameter found in VPN config file: $VPN_CONF" >&2
  exit 1
fi

# fetch/cache one ip address of the vpn endpoint. The same ip needs to be used for both the below vpn connections
VPN_SRV=$(resolve_host ${VPN_HOSTNAME})

# connect to OpenVPN client management socket
coproc setsid -w sg "$VPN_GROUP" "$NETCAT_CMD -U $VPN_MGMT_SOCKET"
NC_OUT=${COPROC[0]}
NC_IN=${COPROC[1]}
MGMT_PID=${COPROC_PID}

trap "echo 'Disconnecting VPN...' && echo 'signal SIGHUP' >&$NC_IN && sleep 1 && kill -- -$MGMT_PID 2>/dev/null; wait " EXIT

echo "state on" >&$NC_IN

while IFS=: read -u $NC_OUT -r signal data
do
  case $signal in
    ">HOLD")
      echo "hold release" >&$NC_IN
      ;;
    ">REMOTE")
      if [[ "$data" == "$VPN_HOSTNAME,$VPN_PORT,udp"* ]]; then
        echo "remote MOD $VPN_SRV $VPN_PORT" >&$NC_IN
      else
        echo "WARN: Skipping attempt to connect to unrecognised endpoint: $data" >&2
        echo "remote SKIP" >&$NC_IN
      fi
      ;;
    ">PASSWORD")
      if [[ "$data" == "Need 'Auth' username/password"* ]]; then
        echo "Opening browser and waiting for the SAML response..."
        if pass=$(auth ${VPN_SRV} ${VPN_PORT} ${VPN_CONF} ${SAML_RESPONSE_TIMEOUT}); then
          echo "username \"Auth\" \"N/A\"" >&$NC_IN
          echo "password \"Auth\" \"$pass\"" >&$NC_IN
        fi
      else
        echo "ERROR: Unable to supply requested authentication: $data" >&2
        exit 1
      fi
      ;;
    ">STATE")
      state=$(echo "$data" | awk -F, '{ print $2 }')
      case $state in
        CONNECTING)
          echo "Connecting to VPN at $VPN_HOSTNAME ($VPN_SRV)"
          systemd-notify "STATUS=Connecting to VPN at $VPN_HOSTNAME ($VPN_SRV)"
          ;;
        WAIT)
          echo "Waiting for response from $VPN_HOSTNAME ($VPN_SRV)..."
          systemd-notify "STATUS=Waiting for response from $VPN_HOSTNAME ($VPN_SRV)..."
          ;;
        AUTH)
          echo "Authenticating with VPN server..."
          systemd-notify "STATUS=Authenticating with VPN server..."
          ;;
        GET_CONFIG)
          echo "Downloading configuration from VPN server..."
          systemd-notify "STATUS=Downloading configuration from VPN server..."
          ;;
        ASSIGN_IP)
          echo "Assigning IP address to VPN interface..."
          systemd-notify "STATUS=Assigning IP address to VPN interface..."
          ;;
        ADD_ROUTES)
          echo "Adding VPN routes to local system..."
          systemd-notify "STATUS=Adding VPN routes to local system..."
          ;;
        CONNECTED)
          echo "Connected to VPN at $VPN_HOSTNAME ($VPN_SRV)"
          systemd-notify --ready "STATUS=Connected to VPN at $VPN_HOSTNAME ($VPN_SRV)"
          ;;
        RECONNECTING)
          echo "Reconnecting to VPN at $VPN_HOSTNAME ($VPN_SRV)"
          systemd-notify "STATUS=Reconnecting to VPN at $VPN_HOSTNAME ($VPN_SRV)"
          ;;
        EXITING)
          echo "OpenVPN client shutting down..."
          systemd-notify "STOPPING=1" "STATUS=OpenVPN client shutting down..."
          trap - EXIT
          kill -- -$MGMT_PID 2>/dev/null
          wait
          exit 1
          ;;
      esac
      ;;
    "ERROR")
      echo "ERROR: $data" >&2
      ;;
    "FATAL")
      echo "FATAL ERROR: $data" >&2
      break;
      ;;
    *)
      ;;
  esac
done

systemd-notify "STOPPING=1"
trap - EXIT
kill -- -$MGMT_PID 2>/dev/null
